package edu.milton.justin.engine;

import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;

public class pxTest {

	public static void main(String args[]) {

		new pxTest();
	}

	BufferedImage b = null;
	int synapseShiftX = 125;
	
	ArrayList<Rectangle> irs = new ArrayList<Rectangle>();

	pxTest() {

		try {
			b = ImageIO.read(new File("./resources/images/cleft.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		getIntersectionRectangles();

	}

	void getIntersectionRectangles() {

		int[][] array = new int[b.getWidth()][b.getHeight()];

		for (int x = 0; x < b.getWidth(); x++) {
			for (int y = 0; y < b.getHeight(); y++) {

				if (b.getRGB(x, y) != 16777215 && b.getRGB(x, y) != 0) {
					b.setRGB(x, y, -16777216);
				}

			}
		}

//		for (int y = 0; y < b.getHeight(); y++) {
		
		int y = 306;

			ArrayList<Integer> indexes = new ArrayList<Integer>();
			int indexNum = 0;
			for (int x = 0; x < b.getWidth(); x++) {

				if (b.getRGB(x, y) == -16777216) {
					indexes.add(x);

					if ((x + 1) < b.getWidth()) {
						if (b.getRGB(x + 1, y) == 0
								|| b.getRGB(x + 1, y) == 16777215) {

							indexNum += 1;
						}
					}

				}

			}

			ArrayList<Integer> splits = new ArrayList<Integer>();
			for (Integer i : indexes) {

				if (indexes.indexOf(i) < (indexes.size() - 1)) {

					if (indexes.get(indexes.indexOf(i) + 1) != (i + 1)) {

						splits.add(indexes.indexOf(i));

					}
				}

			}

			System.out.println(splits);


			int comp = 0;

			for (int i : splits) {

				int dif = indexes.indexOf(i) - indexes.indexOf(comp);

				irs.add(new Rectangle(indexes.indexOf(comp) + synapseShiftX, y,
						dif, 1));

				comp += indexes.get(indexes.indexOf(i));
				
			}

			for (Rectangle r : irs) {

				System.out.println("x: " + r.x + " | y: " + r.y + " | w: "
						+ r.width + " | h: " + r.height);
			}
			
			

			// if (split != -1) {
			// int dif1 = indexes.get(split) - indexes.get(0);
			//
			// irs.add(new Rectangle(indexes.get(0) + synapseShiftX, y, dif1,
			// 1));
			//
			// int dif2 = indexes.get(indexes.size() - 1)
			// - indexes.get(split + 1);
			//
			// irs.add(new Rectangle(indexes.get(split + 1) + synapseShiftX,
			// y, dif2, 1));
			//
			//
			// }

		//}

	}

}
