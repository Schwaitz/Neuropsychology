package edu.milton.justin.engine;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.ImageIO;

import edu.milton.justin.biology.neuron.handlers.ReceptorHandler;
import edu.milton.justin.engine.handlers.FrameHandler;

public class Engine implements Runnable, FrameHandler, ReceptorHandler,
		KeyListener {

	Thread mainThread = new Thread(this);

	PrintStream p = new PrintStream(System.out);
	PrintStream e = new PrintStream(System.err);

	boolean running = true;

	Image brain = null;
	Image neuron = null;
	Image cleft = null;

	BufferedImage b;

	ArrayList<Rectangle> irs = new ArrayList<Rectangle>();

	int ballX = WX / 2;
	int ballY = WY / 2 - 200;
	int ballDX = 0;
	int ballDY = 0;
	
	int synapseShiftX = 125;
	
	Rectangle ballRect = new Rectangle(ballX, ballY, 10,10);

	public static void main(String args[]) {

		new Engine();
	}

	Engine() {



		setupFrame();

		frame.addKeyListener(this);
		
		try {

			brain = ImageIO.read(new File("./resources/images/brain.png"));
			neuron = ImageIO.read(new File("./resources/images/neuron.png"));
			cleft = ImageIO.read(new File("./resources/images/cleft.png"));

			b = ImageIO.read(new File("./resources/images/cleft.png"));

		} catch (Exception e) {

			e.printStackTrace();

		}

		getIntersectionRectangles();

		mainThread.start();

	}

	void getIntersectionRectangles() {

		int[][] array = new int[b.getWidth()][b.getHeight()];

		for (int x = 0; x < b.getWidth(); x++) {
			for (int y = 0; y < b.getHeight(); y++) {

				if (b.getRGB(x, y) != 16777215 && b.getRGB(x, y) != 0) {
					b.setRGB(x, y, -16777216);
				}

			}
		}

		for (int y = 0; y < b.getHeight(); y++) {

			ArrayList<Integer> indexes = new ArrayList<Integer>();
			int indexNum = 0;
			for (int x = 0; x < b.getWidth(); x++) {

				if (b.getRGB(x, y) == -16777216) {
					indexes.add(x);

					if ((x + 1) < b.getWidth()) {
						if (b.getRGB(x + 1, y) == 0
								|| b.getRGB(x + 1, y) == 16777215) {

							indexNum += 1;
						}
					}

				}

			}

			int split = -1;
			for (Integer i : indexes) {

				if (indexes.indexOf(i) < (indexes.size() - 1)) {

					if (indexes.get(indexes.indexOf(i) + 1) != (i + 1)) {

						split = indexes.indexOf(i);

					}
				}

			}
			if (split != -1) {
				int dif1 = indexes.get(split) - indexes.get(0);

				irs.add(new Rectangle(indexes.get(0) + synapseShiftX, y, dif1, 1));

				int dif2 = indexes.get(indexes.size() - 1)
						- indexes.get(split + 1);

				irs.add(new Rectangle(indexes.get(split + 1) + synapseShiftX, y, dif2, 1));

				for (Rectangle r : irs) {

//					p.println("x: " + r.x + " | y: " + r.y + " | w: " + r.width
//							+ " | h: " + r.height);
				}
			}
		}



		p.println("Done!");
	}

	void render(Graphics g) {

		Image offscreen = canvas.createImage(WX, WY);
		Graphics bufferGraphics = offscreen.getGraphics();
		bufferGraphics.clearRect(0, 0, WX, WY);

		if (getLevelValue() == 1) {

			bufferGraphics.drawImage(brain, 100, 100, 90 * 4, 72 * 4, canvas);

		}
		if (getLevelValue() == 2) {

			int nWidth = 50 * 4;
			int nHeight = 72 * 4;

			bufferGraphics.drawImage(neuron, 50, 50, nWidth, nHeight, canvas);

			bufferGraphics.drawImage(neuron, nWidth, nHeight + 25, nWidth,
					nHeight, canvas);

			Graphics2D g2d = (Graphics2D) bufferGraphics;

			g2d.setStroke(new BasicStroke(3));

			g2d.drawOval(nWidth, nHeight, 50, 50);

			g2d.drawLine(nWidth + 50, nHeight + 25, nWidth + 125, nHeight - 25);

			g2d.setStroke(new BasicStroke(1));

			bufferGraphics.setFont(new Font("Impact", 20, 20));

			bufferGraphics.drawString("Synapse", nWidth + 130, nHeight - 30);

		}

		if (getLevelValue() == 3) {

			bufferGraphics.drawImage(b, synapseShiftX, 0, canvas);

			bufferGraphics.setColor(Color.blue);
			bufferGraphics.fillOval(ballX, ballY, 10, 10);

		}

		g.drawImage(offscreen, 0, 0, WX, WY, frame);
	}
	
	
	void checkIntersections(){
		
		for(Rectangle r : irs){
			
			if(ballRect.intersects(r)){
				
				
				ballDX = -1;
				ballDY = -1;

			}
		}
		
	}

	@Override
	public void run() {

		while (running == true) {
			
			frame.requestFocusInWindow();

			ballRect = new Rectangle(ballX, ballY, 10,10);
			ballX += ballDX;
			ballY += ballDY;

			checkIntersections();
			
			render(canvas.getGraphics());

			try {
				mainThread.sleep(25);
			} catch (InterruptedException exception) {
				e.println("Error with mainThread");
			}
		}

	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub

		switch (e.getKeyCode()) {

		case KeyEvent.VK_A:
			ballDX = -5;
			p.println("A");
			break;
		case KeyEvent.VK_D:
			ballDX = 5;
			break;

		case KeyEvent.VK_W:
			ballDY = -5;
			break;
		case KeyEvent.VK_S:
			ballDY = 5;
			break;

		}

	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub

		switch (e.getKeyCode()) {

		case KeyEvent.VK_A:
			ballDX = 0;
			break;
		case KeyEvent.VK_D:
			ballDX = 0;
			break;

		case KeyEvent.VK_W:
			ballDY = 0;
			break;
		case KeyEvent.VK_S:
			ballDY = 0;
			break;

		}

	}

}
