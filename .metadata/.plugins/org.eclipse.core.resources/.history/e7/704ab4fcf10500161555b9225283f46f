package edu.milton.justin.engine;

import java.awt.BasicStroke;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.ArrayList;

import javax.imageio.ImageIO;

import edu.milton.justin.biology.neuron.handlers.ReceptorHandler;
import edu.milton.justin.engine.handlers.FrameHandler;

public class Engine implements Runnable, FrameHandler, ReceptorHandler {

	Thread mainThread = new Thread(this);

	PrintStream p = new PrintStream(System.out);
	PrintStream e = new PrintStream(System.err);

	boolean running = true;

	Image brain = null;
	Image neuron = null;
	Image cleft = null;

	BufferedImage b;

	ArrayList<Rectangle> intersectionRects = new ArrayList<Rectangle>();

	public static void main(String args[]) {

		new Engine();
	}

	Engine() {

		setupFrame();

		try {

			brain = ImageIO.read(new File("./resources/images/brain.png"));
			neuron = ImageIO.read(new File("./resources/images/neuron.png"));
			cleft = ImageIO.read(new File("./resources/images/cleft.png"));

			b = ImageIO.read(new File("./resources/images/cleft.png"));

		} catch (Exception e) {

			e.printStackTrace();

		}

		getIntersectionRectangles();

		mainThread.start();

	}

	void getIntersectionRectangles() {

		int[][] array = new int[b.getWidth()][b.getHeight()];

		for (int x = 0; x < b.getWidth(); x++) {
			for (int y = 0; y < b.getWidth(); y++) {

				array[x][y] = b.getRGB(x, y);

			}
		}
		
		try {
			PrintWriter out = new PrintWriter("./resources/log.txt");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		for (int y = 0; y < b.getWidth(); y++) {
			
			String line = "";
			
			for (int x = 0; x < b.getWidth(); x++) {

				line += b.getRGB(x, y) + " : ";
						
			}
			
			p.println(line);
		}
	}

	void render(Graphics g) {

		Image offscreen = canvas.createImage(WX, WY);
		Graphics bufferGraphics = offscreen.getGraphics();
		bufferGraphics.clearRect(0, 0, WX, WY);

		if (getLevelValue() == 1) {

			bufferGraphics.drawImage(brain, 100, 100, 90 * 4, 72 * 4, canvas);

		}
		if (getLevelValue() == 2) {

			int nWidth = 50 * 4;
			int nHeight = 72 * 4;

			bufferGraphics.drawImage(neuron, 50, 50, nWidth, nHeight, canvas);

			bufferGraphics.drawImage(neuron, nWidth, nHeight + 25, nWidth,
					nHeight, canvas);

			Graphics2D g2d = (Graphics2D) bufferGraphics;

			g2d.setStroke(new BasicStroke(3));

			g2d.drawOval(nWidth, nHeight, 50, 50);

			g2d.drawLine(nWidth + 50, nHeight + 25, nWidth + 125, nHeight - 25);

			g2d.setStroke(new BasicStroke(1));

			bufferGraphics.setFont(new Font("Impact", 20, 20));

			bufferGraphics.drawString("Synapse", nWidth + 130, nHeight - 30);

		}

		if (getLevelValue() == 3) {

			bufferGraphics.drawImage(b, 125, 0, canvas);

		}

		g.drawImage(offscreen, 0, 0, WX, WY, frame);
	}

	@Override
	public void run() {

		while (running == true) {

			render(canvas.getGraphics());

			try {
				mainThread.sleep(25);
			} catch (InterruptedException exception) {
				e.println("Error with mainThread");
			}
		}

	}

}
