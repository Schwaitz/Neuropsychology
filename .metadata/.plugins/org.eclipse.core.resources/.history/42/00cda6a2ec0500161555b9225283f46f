package edu.milton.justin.engine.handlers;

import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.Dictionary;
import java.util.Hashtable;

import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;

public interface FrameHandler {

	JFrame frame = new JFrame("Project");

	JPanel options = new JPanel();
	JButton one = new JButton("One");
	JButton two = new JButton("Two");
	JButton three = new JButton("Three");

	JPanel canvas = new JPanel();

	JSlider level = new JSlider(1, 3);
	int startLevel = 1;

	Dictionary<Integer, JLabel> levelDictionary = new Hashtable<Integer, JLabel>();

	int WX = 600;
	int WY = 800;

	default void setupFrame() {

		frame.setEnabled(true);
		frame.setVisible(true);
		// frame.setResizable(false);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLayout(new BorderLayout());

		setupCanvas();
		setupPanel();

		frame.setSize(WX, WY);
	}

	default void render(Graphics g) {

		Image brain = null;
		Image neuron = null;
		Image cleft = null;

		try {

			brain = ImageIO.read(new File("./resources/images/brain.png"));
			neuron = ImageIO.read(new File("./resources/images/neuron.png"));
			cleft = ImageIO.read(new File("./resources/images/cleft.png"));

		} catch (Exception e) {

			e.printStackTrace();

		}

		Image offscreen = canvas.createImage(WX, WY);
		Graphics bufferGraphics = offscreen.getGraphics();
		bufferGraphics.clearRect(0, 0, WX, WY);

		if (getLevelValue() == 1) {

			bufferGraphics.drawImage(brain, 100, 100, 90 * 4, 72 * 4, canvas);

		}
		if (getLevelValue() == 2) {

			bufferGraphics.drawImage(neuron, 0,0, 50 * 4, 72 * 4, canvas);

		}

		if (getLevelValue() == 3) {

			bufferGraphics.drawImage(cleft, 125, 0, canvas);

		}
		g.drawImage(offscreen, 0, 0, WX, WY, frame);
	}

	default void paintToFrame() {

		render(canvas.getGraphics());

	}

	default void setupCanvas() {

		frame.add(canvas, BorderLayout.CENTER);

	}

	default void setupPanel() {

		options.add(one);
		options.add(two);
		options.add(three);

		setupLevel();

		frame.add(options, BorderLayout.SOUTH);

	}

	default void setupLevel() {

		level.setValue(startLevel);
		level.setSnapToTicks(true);

		levelDictionary.put(1, new JLabel("Brain"));
		levelDictionary.put(2, new JLabel("Neuron"));
		levelDictionary.put(3, new JLabel("Synapse"));

		level.setLabelTable(levelDictionary);
		level.setPaintLabels(true);

		options.add(level);

	}

	default int getLevelValue() {

		return level.getValue();

	}

}
